public class Queue {
    private int[] queue;
    private int front, rear, size, capacity;

    // Constructor to initialize the queue
    public Queue(int capacity) {
        this.capacity = capacity;
        this.queue = new int[capacity];
        this.front = 0;
        this.rear = -1;
        this.size = 0;
    }

    // Method to check if the queue is full
    public boolean isFull() {
        return size == capacity;
    }

    // Method to check if the queue is empty
    public boolean isEmpty() {
        return size == 0;
    }

    // Method to add an element to the queue (enqueue)
    public void enqueue(int element) {
        if (isFull()) {
            System.out.println("Queue is full, cannot enqueue " + element);
        } else {
            rear = (rear + 1) % capacity;  // Circular increment
            queue[rear] = element;
            size++;
            System.out.println("Enqueued: " + element);
        }
    }

    // Method to remove an element from the queue (dequeue)
    public int dequeue() {
        if (isEmpty()) {
            System.out.println("Queue is empty, cannot dequeue");
            return -1;  // Return a sentinel value
        } else {
            int element = queue[front];
            front = (front + 1) % capacity;  // Circular increment
            size--;
            System.out.println("Dequeued: " + element);
            return element;
        }
    }

    // Method to get the front element of the queue
    public int peek() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
            return -1;  // Return a sentinel value
        } else {
            return queue[front];
        }
    }

    // Method to display the elements of the queue
    public void display() {
        if (isEmpty()) {
            System.out.println("Queue is empty");
        } else {
            System.out.print("Queue elements: ");
            for (int i = 0; i < size; i++) {
                System.out.print(queue[(front + i) % capacity] + " ");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        // Create a queue of capacity 5
        Queue q = new Queue(5);

        // Perform some enqueue and dequeue operations
        q.enqueue(10);
        q.enqueue(20);
        q.enqueue(30);
        q.enqueue(40);
        q.enqueue(50);
        q.display();

        // Try to enqueue into a full queue
        q.enqueue(60);  // Should print "Queue is full"

        // Dequeue some elements
        q.dequeue();
        q.dequeue();
        q.display();

        // Peek the front element
        System.out.println("Front element: " + q.peek());

        // Dequeue all elements
        q.dequeue();
        q.dequeue();
        q.dequeue();

        // Try to dequeue from an empty queue
        q.dequeue();  // Should print "Queue is empty"
    }
}
