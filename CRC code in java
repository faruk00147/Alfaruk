import java.util.Scanner;

public class CRC16_CCITT {
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);

        // Input the data bits to be sent
        System.out.print("Enter data size (n): ");
        int dataSize = scan.nextInt();
        int[] data = new int[dataSize];
        System.out.println("Enter data bits (0 or 1): ");
        for (int i = 0; i < data.length; i++) {
            data[i] = scan.nextInt();
        }

        // Define the CRC-16-CCITT generator polynomial: 0x11021 (x^16 + x^12 + x^5 + 1)
        int[] divisor = {1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1}; // 0x11021, 16-bits

        // Calculate CRC for the data
        int[] crc = calculateCRC(data, divisor);

        // Output the generated CRC code
        System.out.print("Generated CRC code: ");
        for (int bit : data) System.out.print(bit);
        for (int bit : crc) System.out.print(bit);
        System.out.println();

        // Prepare the message to send (data + CRC)
        int[] sentData = new int[data.length + crc.length];
        System.arraycopy(data, 0, sentData, 0, data.length);
        System.arraycopy(crc, 0, sentData, data.length, crc.length);

        // Input received data (sent data including CRC)
        System.out.println("Enter received data bits (data + CRC): ");
        for (int i = 0; i < sentData.length; i++) {
            sentData[i] = scan.nextInt();
        }

        // Check received data for errors
        checkData(sentData, divisor);

        scan.close();
    }

    // Method to calculate CRC using the divisor (generator polynomial)
    static int[] calculateCRC(int[] data, int[] divisor) {
        // Augment the data with 16 zeros (as per CRC-16)
        int[] augmentedData = new int[data.length + divisor.length - 1];
        System.arraycopy(data, 0, augmentedData, 0, data.length);

        // Perform division (XOR operation)
        for (int i = 0; i < data.length; i++) {
            if (augmentedData[i] == 1) {
                // XOR the data with the divisor
                for (int j = 0; j < divisor.length; j++) {
                    augmentedData[i + j] ^= divisor[j];
                }
            }
        }

        // Return the remainder (CRC)
        return extractCRC(augmentedData, data.length, augmentedData.length);
    }

    // Extract the CRC from the augmented data
    static int[] extractCRC(int[] augmentedData, int dataLength, int augmentedLength) {
        int[] crc = new int[16];
        System.arraycopy(augmentedData, dataLength, crc, 0, 16);
        return crc;
    }

    // Method to check data integrity by dividing received data
    static void checkData(int[] receivedData, int[] divisor) {
        // Perform division to check if the received data is error-free
        int[] rem = calculateCRC(receivedData, divisor);
        for (int r : rem) {
            if (r != 0) {
                System.out.println("Corrupted data received...");
                return;
            }
        }
        System.out.println("Data received without error.");
    }
}
